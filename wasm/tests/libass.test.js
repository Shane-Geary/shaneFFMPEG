const fs = require('fs');
const path = require('path');
const { TIMEOUT } = require('./config');
const { runFFmpeg, b64ToUint8Array } = require('./utils');
const ARIAL_TTF = require('./data/arial.ttf.js');
const SRT_FILE = `
1
00:00:00,000 --> 00:00:01,000
ffmpeg.wasm test
`;
const ASS_FILE = `
[Script Info]
; Script generated by FFmpeg/Lavc58.91.100
ScriptType: v4.00+
PlayResX: 240
PlayResY: 256
ScaledBorderAndShadow: yes

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:01.00,Default,,0,0,0,,ffmpeg.wasm test
`;
const IN_FILE_NAME = 'video-1s.avi';
const OUT_FILE_NAME = 'video.mp4';
const MP4_WITH_SRT_FILE_SIZE = 38695;
const MP4_WITH_ASS_FILE_SIZE = 38532;
let aviData = null;

beforeAll(() => {
  aviData = Uint8Array.from(fs.readFileSync(path.join(__dirname, 'data', IN_FILE_NAME)));
});

test('transcode avi to x264 mp4 with *.srt subtitle', async () => {
  const args = ['-i', IN_FILE_NAME, '-vf', 'subtitles=test.srt:fontsdir=/fonts:force_style="Fontname=Arial"', OUT_FILE_NAME];
  const { fileSize } = await runFFmpeg(IN_FILE_NAME, aviData, args, OUT_FILE_NAME, [{ name: '/fonts/arial.ttf', data: b64ToUint8Array(ARIAL_TTF) }, { name: 'test.srt', data: SRT_FILE }], ['/fonts']);
  expect(fileSize).toBe(MP4_WITH_SRT_FILE_SIZE);
}, TIMEOUT);

test('transcode avi to x264 mp4 with *.ass subtitle', async () => {
  const args = ['-i', IN_FILE_NAME, '-vf', 'ass=test.ass:fontsdir=/fonts', OUT_FILE_NAME];
  const { fileSize } = await runFFmpeg(IN_FILE_NAME, aviData, args, OUT_FILE_NAME, [{ name: '/fonts/arial.ttf', data: b64ToUint8Array(ARIAL_TTF) }, { name: 'test.ass', data: ASS_FILE }], ['/fonts']);
  expect(fileSize).toBe(MP4_WITH_ASS_FILE_SIZE);
}, TIMEOUT);
